Lab Manual for Software Construction and Development – SESD3241
Practice Lab 03


Lab Manual
SCD LAB Booklet











Faculty of Information Technology
UCP Lahore Pakistan









Contents
Lab Manual for Software Construction and Development – SESD3241	1
Objective:	2
Basic Syntax	2
•	Case Sensitivity	2
•	Class Names	2
•	Method Names	2
•	Program File Name	2
Java Identifiers	3
Java Modifiers	3
Java Variables	3
Java Arrays	3
Example	4
Examples	5


















Objective:  Get familiar with java syntax, arrays, methods, loops & if/else statements.
A Java program can be defined as a collection of objects that communicate via invoking each other's methods. Let us briefly look into what class, object, methods, and instance variables mean.
•	Object − Objects have states and behaviors. Example: A dog has states - color, name, and breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.
•	Class − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.
•	Methods − A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.
•	Instance Variables − Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.
Syntax 
public class MyFirstJavaProgram {
   /* This is my first java program.
  * This will print 'Hello World' as the output
    */public static void main(String []args{
   System.out.println("Hello World"); // prints Hello World
   }
}
Basic Syntax
About Java programs, it is very important to keep in mind the following points.
•	Case Sensitivity − Java is case sensitive, which means identifier Hello and hello would have different meaning in Java.
•	Class Names − For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word's first letter should be in Upper Case.
Example: class MyFirstJavaClass
•	Method Names − All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word's first letter should be in Upper Case.
Example: public void myMethodName()
•	Program File Name − Name of the program file should exactly match the class name.
When saving the file, you should save it using the class name (Remember Java is case sensitive) and append '.java' to the end of the name (if the file name and the class name do not match, your program will not compile).
But please make a note that in case you do not have a public class present in the file then file name can be different than class name. It is also not mandatory to have a public class in the file.
Example: Assume 'MyFirstJavaProgram' is the class name. Then the file should be saved as 'MyFirstJavaProgram.java'
•	public static void main(String args[]) − Java program processing starts from the main() method which is a mandatory part of every Java program
Java Identifiers
All Java components require names. Names used for classes, variables, and methods are called identifiers.
In Java, there are several points to remember about identifiers. They are as follows −
•	All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).
•	After the first character, identifiers can have any combination of characters.
•	A key word cannot be used as an identifier.
•	Most importantly, identifiers are case sensitive.
•	Examples of legal identifiers: age, $salary, _value, __1_value.
•	Examples of illegal identifiers: 123abc, -salary.
Java Modifiers
Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers −
•	Access Modifiers − default, public , protected, private
•	Non-access Modifiers − final, abstract, strictfp
Java Variables
Following are the types of variables in Java −
•	Local Variables
•	Class Variables (Static Variables)
•	Instance Variables (Non-static Variables)
Java Arrays
Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.
For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.
Example
class FreshJuice {
   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }
   FreshJuiceSize size;
}

public class FreshJuiceTest {

   public static void main(String args[]) {
      FreshJuice juice = new FreshJuice();
      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;
      System.out.println("Size: " + juice.size);
   }
}
Output
Size: MEDIUM



























Instructions:
•	Use Eclipse IDE for coding.
•	For submission, create a word document, mention your name & ID, take screenshot of your solution (code) and output (console), insert the screenshot to that document and upload it on the submission portal (Teams).
•	Plagiarized content will not be tolerated and there will no marks for such content.
Examples 
Lab Exercise 1:
Write a program that computes the tax and tip on a restaurant bill for a patron with a $44.50 meal charge. The tax should be 6.75 percent of the meal cost. The tip should be 15 percent of the total after adding the tax. Display the meal cost, tax amount, tip amount, and total bill on the screen. 
Lab Exercise 2:
Write a program, which prints the first ‘N’ terms of Fibonacci sequence. Take the value of ‘N’ from user. Fibonacci Sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, ... 
Lab Exercise 3:
Write a function which checks whether array elements are unique or not. 
Lab Exercise 4:
Write a program, which receives two matrices, and display the result of addition of two given matrices on console. 

